# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:50:13+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    BaseSecurity,
    UnsuportedSecurityStub,
)
from fastapi import Path, Query

from models import (
    Default,
    Option,
    Organization,
    Receiver,
    Report,
    RouteTo,
    Sender,
    SettingsOrganizationsGetResponse,
    SettingsOrganizationsOrganizationNameReceiversGetResponse,
    SettingsOrganizationsOrganizationNameSendersGetResponse,
    SettingsOrganizationsOrganizationNameSendersSenderNamePutResponse,
)

app = MCPProxy(
    contact={
        'email': 'reportstream@cdc.gov',
        'name': 'USDS at Centers for Disease Control and Prevention',
        'url': 'https://reportstream.cdc.gov',
    },
    description='A router of public health data from multiple senders and receivers',
    title='Prime ReportStream',
    version='0.2.0-oas3',
    servers=[{'url': 'http://cdcgov.local'}],
)


@app.post(
    '/reports',
    tags=['report_management'],
    security=[
        APIKeyHeader(name="x-functions-key"),
    ],
)
def post_reports(
    client: str,
    option: Optional[Option] = None,
    default: Optional[Default] = None,
    route_to: Optional[RouteTo] = Query(None, alias='routeTo'),
):
    """
    Post a report to the data hub
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/organizations',
    description=""" The settings for all organizations of the system. Must have admin access. """,
    tags=['organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_settings_organizations():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/settings/organizations',
    description=""" Retrived the last modified for all settings of the system. Must have admin access. """,
    tags=['report_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def head_settings_organizations():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/settings/organizations/{organizationName}',
    description=""" Delete an organization (and the associated receivers and senders) """,
    tags=['organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_settings_organizations__organization_name(
    organization_name: str = Path(..., alias='organizationName')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/organizations/{organizationName}',
    description=""" A single organization settings """,
    tags=['organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_settings_organizations__organization_name(
    organization_name: str = Path(..., alias='organizationName')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/settings/organizations/{organizationName}',
    description=""" Create or update the direct settings associated with an organization """,
    tags=['organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_settings_organizations__organization_name(
    organization_name: str = Path(..., alias='organizationName'),
    body: Organization = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/organizations/{organizationName}/receivers',
    description=""" A list of receivers and their current settings """,
    tags=['organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_settings_organizations__organization_name_receivers(
    organization_name: str = Path(..., alias='organizationName')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/settings/organizations/{organizationName}/receivers/{receiverName}',
    description=""" Delete a receiver """,
    tags=['organization_config_management', 'receiver_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_organization_receiver_settings(
    organization_name: str = Path(..., alias='organizationName'),
    receiver_name: str = Path(..., alias='receiverName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/organizations/{organizationName}/receivers/{receiverName}',
    description=""" The settings of a single of receiver """,
    tags=['organization_config_management', 'receiver_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_organization_receiver_settings(
    organization_name: str = Path(..., alias='organizationName'),
    receiver_name: str = Path(..., alias='receiverName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/settings/organizations/{organizationName}/receivers/{receiverName}',
    description=""" Update a single reciever """,
    tags=['receiver_config_management', 'organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_receiver_settings(
    organization_name: str = Path(..., alias='organizationName'),
    receiver_name: str = Path(..., alias='receiverName'),
    body: Receiver = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/organizations/{organizationName}/senders',
    description=""" A list of senders """,
    tags=['organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_settings_organizations__organization_name_senders(
    organization_name: str = Path(..., alias='organizationName')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/settings/organizations/{organizationName}/senders/{senderName}',
    description=""" Delete a sender """,
    tags=['sender_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_organization_sender_settings(
    organization_name: str = Path(..., alias='organizationName'),
    sender_name: str = Path(..., alias='senderName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/organizations/{organizationName}/senders/{senderName}',
    description=""" The settings of a single of sender """,
    tags=['sender_config_management', 'organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_organization_sender_settings(
    organization_name: str = Path(..., alias='organizationName'),
    sender_name: str = Path(..., alias='senderName'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/settings/organizations/{organizationName}/senders/{senderName}',
    description=""" Update a single sender """,
    tags=['sender_config_management', 'organization_config_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_sender_settings(
    organization_name: str = Path(..., alias='organizationName'),
    sender_name: str = Path(..., alias='senderName'),
    body: Sender = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
