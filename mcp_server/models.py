# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:50:13+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AS2Transport(BaseModel):
    contentDescription: Optional[str] = Field(
        'SARS-CoV-2 Electronic Lab Results',
        description='A description of the content of the message. Usually, the same for all messages.',
    )
    mimeType: Optional[str] = Field(
        'application/hl7-v2', description='The MIME type of the message'
    )
    receiverId: str = Field(
        ...,
        description='The AS2 id of the receiver. Usually, the same for all senders.',
        examples=['exampleAS2Id'],
    )
    receiverUrl: str = Field(
        ...,
        description='The URL to the AS2 end-point',
        examples=['https://as2.example.com/receiver.aspx'],
    )
    senderEmail: Optional[str] = Field(
        'reportstream@cdc.gov',
        description='The email address to contact someone about the message',
    )
    senderId: str = Field(
        ...,
        description='The AS2 id of the sender. Usually, assigned by receiver to PRIME.',
        examples=['primeAS2Id'],
    )
    type: str = Field(..., description='The discriminator', examples=['AS2'])


class BlobStoreTransport(BaseModel):
    containerName: str = Field(
        ..., description='This name of the Azure container', examples=['hhsprotect']
    )
    storageName: str = Field(
        ...,
        description='This looks for an env var with this name. env var value is the connection string',
    )
    type: str = Field(..., description='The discriminator', examples=['BLOBSTORE'])


class Format(Enum):
    CSV = 'CSV'
    HL7 = 'HL7'


class Destination(BaseModel):
    itemCount: Optional[int] = Field(
        None, description='The number of reports being sent to this destination'
    )
    organization: Optional[str] = Field(
        None, description='The name of the organization reciving the report'
    )
    organization_id: Optional[str] = Field(
        None, description='The organization id (i.e. {state abbreviation}-phd)'
    )
    sending_at: Optional[datetime] = Field(
        None, description='The time at which the report will be sent'
    )
    service: Optional[str] = Field(
        None, description='The service used for delivering the report'
    )


class Scope(Enum):
    Parameter = 'Parameter'
    Report = 'Report'
    Item = 'Item'


class Detail(BaseModel):
    detail: Optional[str] = Field(None, description='The details of the error')
    id: Optional[str] = Field(
        None,
        description="Depends on scope, either the item's id (message_id) or the report's id",
    )
    scope: Optional[Scope] = Field(None, description='Does the error apply to one item')


class ItemRouting(BaseModel):
    destinations: Optional[List[str]] = Field(
        None, description='The organization and service destinations'
    )
    reportIndex: Optional[int] = Field(
        None, description='the index of the item in the submitted report (0 based)'
    )
    trackingId: Optional[str] = Field(
        None,
        description='The tracking id provided by the sender defined in the schema, null otherwise',
    )


class NullTransport(BaseModel):
    dummy: Optional[str] = Field(None, description='A dummy value')
    type: str = Field(..., description='The discriminator', examples=[None])


class Jurisdiction(Enum):
    National = 'National'
    State = 'State'
    County = 'County'


class MatchFields(Enum):
    FACILITY_OR_PATIENT_ADDRESS = 'FACILITY_OR_PATIENT_ADDRESS'
    FACILITY_ADDRESS = 'FACILITY_ADDRESS'
    FACILITY_NAME = 'FACILITY_NAME'
    ABNORMAL_VALUE = 'ABNORMAL_VALUE'


class JurisdictionalFilter(BaseModel):
    doesNotMatch: Optional[bool] = Field(
        False, description='Ensure that the result does not match'
    )
    matchFields: Optional[MatchFields] = Field(
        None, description='What fields to match in the filter'
    )
    matchValues: Optional[List[str]] = Field(
        None, description='What is the value to match against'
    )


class Frequency(Enum):
    REAL_TIME = 'REAL_TIME'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'


class Timing(BaseModel):
    dailyAt: Optional[float] = Field(
        None, description='The UTC hour to send a daily batch'
    )
    frequency: Frequency = Field(..., description='How often send a report')


class RedoxConfiguration(RootModel[Any]):
    root: Any


class RedoxTransport(BaseModel):
    baseUrl: Optional[str] = Field(
        None,
        description='the base URL to send the Redox message. If missing, production Redox URL is used',
    )
    type: str = Field(..., description='The discriminator', examples=['REDOX'])


class Report(BaseModel):
    destinationCount: Optional[int] = Field(
        None, description='total destinations recieving the report(s)'
    )
    destinations: Optional[List[Destination]] = Field(
        None, description='where the report is being sent to'
    )
    errorCount: Optional[int] = Field(
        None,
        description='total errors found during initial validation.  There may be multiple errors per item.',
    )
    errors: Optional[List[Detail]] = Field(
        None, description='a list of errors in the report'
    )
    id: str = Field(..., description='the id for the report assigned by the Hub')
    reportItemCount: Optional[int] = Field(
        None,
        description='total number of individual reports sent to the Hub (in a csv, the number of data lines sent)',
    )
    routing: Optional[List[ItemRouting]] = Field(
        None,
        description='The receiver destination names for each item in the report. This is displayed when verbose=true is present on the query string.',
    )
    timestamp: Optional[str] = Field(
        None, description='the timestamp for this report submission'
    )
    topic: Optional[str] = Field(
        None, description='the topic configured for the client organization sender'
    )
    warningCount: Optional[int] = Field(
        None,
        description='total warnings found during initial validation.  There may be multiple warnings per item.',
    )
    warnings: Optional[List[Detail]] = Field(
        None, description='a list of warnings in the report'
    )


class SFTPTransport(BaseModel):
    filePath: str = Field(
        ..., description='The file path to place the report', examples=['/in/test']
    )
    host: str = Field(
        ..., description='Host name and domain', examples=['sftp.phd.gov']
    )
    port: float = Field(..., description='The port to use', examples=[22])
    type: str = Field(..., description='The discriminator', examples=['SFTP'])


class Format1(Enum):
    CSV = 'CSV'


class SettingMetadata(BaseModel):
    createdAt: Optional[str] = Field(
        None, description='the time that the particular revision was created'
    )
    createdBy: Optional[str] = Field(
        None,
        description='the user who created the particular revision',
        examples=['jj@phd.gov'],
    )
    version: Optional[float] = Field(
        None, description='the version number of the object', examples=[11]
    )


class PhoneNumberFormatting(Enum):
    STANDARD = 'STANDARD'
    ONLY_DIGITS_IN_COMPONENT_ONE = 'ONLY_DIGITS_IN_COMPONENT_ONE'
    AREA_LOCAL_IN_COMPONENT_ONE = 'AREA_LOCAL_IN_COMPONENT_ONE'


class StandardHL7Configuration(BaseModel):
    convertTimestampToDateTime: Optional[str] = Field(
        None,
        description='A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format',
    )
    defaultAoeToUnknown: Optional[bool] = Field(
        False, description='Default the AOE result to UNK'
    )
    includeAOE: bool = Field(..., description='Include the AOE')
    nameFormat: Optional[str] = Field(
        'standard',
        description='The format to use for the file name generated by the translation',
    )
    phoneNumberFormatting: Optional[PhoneNumberFormatting] = Field(
        'STANDARD', description='How to format phone numbers (XTN fields)'
    )
    receivingApplicationName: Optional[str] = Field(
        None, description='The receiving application name (needed for HL7 formats)'
    )
    receivingApplicationOID: Optional[str] = Field(
        None, description='The receiving application OID'
    )
    receivingFacilityName: Optional[str] = Field(
        None, description='The receiving facility name'
    )
    receivingFacilityOID: Optional[str] = Field(
        None, description='The receiving facility name'
    )
    receivingOrganization: Optional[str] = Field(
        None, description='The name of the receiving organization in the message'
    )
    reportingFacilityId: Optional[str] = Field(
        None,
        description="The reporting facility id (if different from CDC PRIME's OID)",
    )
    reportingFacilityIdType: Optional[str] = Field(
        None, description='The reporting facility id type (if different from OID)'
    )
    reportingFacilityName: Optional[str] = Field(
        None, description='The reporting facility name (if different from CDC PRIME)'
    )
    suppressAoe: Optional[bool] = Field(
        False, description='Suppress the AOE OBX results'
    )
    suppressHl7Fields: Optional[str] = Field(
        None, description='A comma delimited list of HL7 fields to suppress'
    )
    suppressQstForAoe: Optional[bool] = Field(
        False, description='Suppress QST component is AOE OBX segments'
    )
    transport: Union[SFTPTransport, AS2Transport, BlobStoreTransport, NullTransport]
    truncateHDNamespaceIds: Optional[bool] = Field(
        False, description='Truncate the HD fields to HD_TRUNCATION_LIMIT'
    )
    type: Literal['StandardHL7Configuration'] = Field(
        ..., description='The discrimenator', examples=['STANDARD_HL7']
    )
    useBatchHeaders: bool = Field(..., description='Use BHS and FHS header')
    useBlankInsteadOfUnknown: Optional[str] = Field(
        None,
        description='A comma delimited list of element names that should use blank instead of unknown',
    )
    usePid14ForPatientEmail: Optional[bool] = Field(
        False,
        description='Use the PID-14 field for patient email instead of the standard PID-13 field',
    )
    useTestProcessingMode: Optional[bool] = Field(
        False, description='Set a test process mode flag'
    )


class Option(Enum):
    ValidatePayload = 'ValidatePayload'
    CheckConnections = 'CheckConnections'
    SendImmediately = 'SendImmediately'
    SkipSend = 'SkipSend'
    SkipInvalidItems = 'SkipInvalidItems'


class Default(RootModel[List[str]]):
    root: List[str]


class RouteTo(RootModel[List[str]]):
    root: List[str]


class CustomConfiguration(BaseModel):
    format: Format = Field(..., description='The format of the serializer')
    nameFormat: Optional[str] = Field(
        'standard',
        description='The format to use for the file name generated by the translation',
    )
    receivingOrganization: Optional[str] = Field(
        None, description='The name of the receiving organization in the message'
    )
    schemaName: str = Field(..., description='The name of the custom schema')
    transport: Union[SFTPTransport, AS2Transport, BlobStoreTransport, NullTransport] = (
        Field(..., description='The transport to use')
    )
    type: Literal['CustomConfiguration'] = Field(
        ..., description='The discrimenator', examples=['CUSTOM']
    )


class Organization(BaseModel):
    countyName: Optional[str] = Field(
        None, description='the county name (must match FIPS name)', examples=['Pima']
    )
    description: str = Field(
        ...,
        description='the displayable description of the organization',
        examples=['Arizona PHD'],
    )
    jurisdiction: Jurisdiction
    meta: Optional[SettingMetadata] = None
    name: str = Field(
        ..., description='the unique id for the organization', examples=['az-phd']
    )
    stateCode: Optional[str] = Field(
        None, description='the two letter code for the organization', examples=['AZ']
    )


class Translations(
    RootModel[Union[CustomConfiguration, StandardHL7Configuration, RedoxConfiguration]]
):
    root: Union[CustomConfiguration, StandardHL7Configuration, RedoxConfiguration] = (
        Field(..., discriminator='type')
    )


class Receiver(BaseModel):
    description: str = Field(
        ...,
        description='Display ready description of the receiver',
        examples=['Arizona PHD ELR feed'],
    )
    jurisdictionalFilters: Optional[List[JurisdictionalFilter]] = Field(
        None, description='What items to include in the report.'
    )
    meta: Optional[SettingMetadata] = None
    name: str = Field(
        ...,
        description='The unique name for the receiver. Should include the organization name as a prefix.',
        examples=['az-phd.elr'],
    )
    organizationName: Optional[str] = Field(
        None,
        description='The name of the organization that this receiver belongs to',
        examples=['az-phd'],
    )
    timing: Timing = Field(
        ..., description='When the report is sent if not immediately'
    )
    topic: str = Field(
        ...,
        description='The topic of for this receiver. Must match the supported topics.',
        examples=['covid-19'],
    )
    translations: Optional[List[Translations]] = Field(
        None,
        description='How the report is translated from the sender. A report can be sent in multiple ways.',
    )


class Sender(BaseModel):
    description: str = Field(..., description='Display ready description of the sender')
    format: Format1 = Field(..., description='the payload format')
    meta: Optional[SettingMetadata] = None
    name: str = Field(
        ...,
        description='Unique name for the senders, includes the orgninzation name',
        examples=['simple_report.default'],
    )
    organizationName: Optional[str] = Field(
        None,
        description='Name of the organization that this sender belongs to',
        examples=['az-phd'],
    )
    schema_: str = Field(
        ...,
        alias='schema',
        description='the schema name for this sender',
        examples=['az-phd-covid-19'],
    )
    topic: str = Field(
        ...,
        description='Topic of for this sender. Must match the supported topics.',
        examples=['covid-19'],
    )


class SettingsOrganizationsGetResponse(RootModel[List[Organization]]):
    root: List[Organization]


class SettingsOrganizationsOrganizationNameReceiversGetResponse(
    RootModel[List[Receiver]]
):
    root: List[Receiver]


class SettingsOrganizationsOrganizationNameSendersGetResponse(RootModel[List[Sender]]):
    root: List[Sender]


class SettingsOrganizationsOrganizationNameSendersSenderNamePutResponse(
    RootModel[List[Sender]]
):
    root: List[Sender]
